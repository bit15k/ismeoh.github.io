import{_ as a,X as e,Y as i,a1 as n}from"./framework-ca96282b.js";const d={},l=n(`<h1 id="数据结构概论" tabindex="-1"><a class="header-anchor" href="#数据结构概论" aria-hidden="true">#</a> 数据结构概论</h1><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><h3 id="研究内容" tabindex="-1"><a class="header-anchor" href="#研究内容" aria-hidden="true">#</a> 研究内容</h3><h4 id="数值运算" tabindex="-1"><a class="header-anchor" href="#数值运算" aria-hidden="true">#</a> 数值运算</h4><p>早期计算机的用途，计算<code>数值运算</code>，例如加减乘除</p><p>由此，得出<code>计算机解决一个问题</code>通常有如下步骤</p><ul><li>具体问题抽象成数学模型</li><li>设计算法</li><li>编程、调试、运行</li></ul><p><code>抽象成数学模型</code></p><ul><li>分析问题</li><li>提取出操作对象</li><li>找出操作对象之间的关系</li><li>用数学语言描述，又叫做<code>数据结构</code></li></ul><h4 id="非数值运算" tabindex="-1"><a class="header-anchor" href="#非数值运算" aria-hidden="true">#</a> 非数值运算</h4><p>之后，<code>非数值计算</code>的应用领域，例如学生的成绩管理系统，如下</p><ul><li>操作对象：每个学生的信息</li><li>操作算法：增删改查</li><li>操作对象之间的关系：线性关系</li><li>数据结构：线性表</li></ul><p>例，人机对弈问题，比如下棋</p><ul><li>操作对象，各种棋局的状态</li><li>算法，走棋</li><li>操作对象之间的关系，非线性关系</li><li>数据结构，树</li></ul><p>另外，还有文件系统结构图，地图导航最短路径求法等等</p><p>以上内容都有如下<code>特点</code></p><ul><li><code>无法</code>用数学公式、方程<code>描述</code>，是一些非数值运算程序设计问题</li><li>解决非数值计算问题的数学模型不是方程、公式，而是一些表、树、图等具有<code>逻辑关系</code>的数据</li></ul><p>因此，可以对数据结构做一个简单的定义</p><ul><li><code>数据结构</code>是一门研究<code>非数值计算</code>的程序设计中计算机的<code>操作对象</code>和他们之间<code>关系</code>和<code>操作</code>的学科</li></ul><h3 id="一些概念" tabindex="-1"><a class="header-anchor" href="#一些概念" aria-hidden="true">#</a> 一些概念</h3><h4 id="数据" tabindex="-1"><a class="header-anchor" href="#数据" aria-hidden="true">#</a> 数据</h4><p><code>数据</code>是输入计算机，能被计算机识别和处理的各种符号的集合<br> 解释：是信息的载体、是对客观事物的符号化表示、能够被计算机识别和处理</p><p>分类</p><ul><li>数值型数据，如整数</li><li>非数值型数据，如图像</li></ul><h4 id="数据元素" tabindex="-1"><a class="header-anchor" href="#数据元素" aria-hidden="true">#</a> 数据元素</h4><p><code>数据元素</code>是数据的基本单位，通常看做一个整体，也叫作元素、记录、定点等，例如学生表中每一个学生的信息，是一个整体</p><h4 id="数据项" tabindex="-1"><a class="header-anchor" href="#数据项" aria-hidden="true">#</a> 数据项</h4><p><code>数据项</code>是构成数据元素不可分割的最小单位，例如学生表中每个学生信息的具体学号、性别、年龄，这里是指数据项<br> 数据＞数据元素＞数据项</p><h4 id="数据对象" tabindex="-1"><a class="header-anchor" href="#数据对象" aria-hidden="true">#</a> 数据对象</h4><p>数据对象是指性质相同的数据元素的集合，是数据的一个子集，例如椭圆、圆都是属于圆</p><p>数据元素与数据的关系：个体与集合<br> 数据对象和数据的关系：子集和集合</p><h3 id="数据结构定义" tabindex="-1"><a class="header-anchor" href="#数据结构定义" aria-hidden="true">#</a> 数据结构定义</h3><p><code>结构</code>是元素之间存在的关系,即结构=关系<br> 因此数据结构可以被定义为</p><p><code>数据结构</code>是一个数据元素集合，该数据元素集合内部元素之间存在一种或多种特定的关系</p><p>或者说数据元素是一个<code>带结构的数据元素集合</code></p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><p><code>数据结构</code>主要包含三方面的内容</p><ul><li><code>逻辑结构</code> 数据元素之间的逻辑关系</li><li><code>物理结构</code> 数据元素和关系在计算机中的表示 或叫做影像、物理结构、存储结构</li><li><code>运算和实现</code> 对这些数据元素可以施加的操作和这些操作在存储结构上的实现</li></ul><h3 id="两个层次" tabindex="-1"><a class="header-anchor" href="#两个层次" aria-hidden="true">#</a> 两个层次</h3><ul><li>逻辑结构 <ul><li>数据元素之间的逻辑关系</li><li>与数据的存储无关，独立于计算机</li><li>从具体问题出发抽象出来的数学模型</li></ul></li><li>物理结构 <ul><li>存储结构是元素本身的存储结构以及元素之间关系的存储结构，换句话说就是元素本身如何存储以及元素之间的关系如何存储</li></ul></li></ul><h3 id="逻辑结构与物理结构关系" tabindex="-1"><a class="header-anchor" href="#逻辑结构与物理结构关系" aria-hidden="true">#</a> 逻辑结构与物理结构关系</h3><ul><li>存储结构是逻辑关系的存储结构和元素本身的存储结构</li><li>逻辑结构是数据结构的抽象，物理结构是逻辑结构实现</li><li>二者综合起来构成数据元素之间的结构关系</li></ul><h3 id="逻辑结构" tabindex="-1"><a class="header-anchor" href="#逻辑结构" aria-hidden="true">#</a> 逻辑结构</h3><p>划分方法一</p><ul><li><code>线性结构</code>，只有一个开始节点和一个结束节点，中间元素最多一个直接的前驱和一个直接的后继，例如线性表、队、栈等</li><li><code>非线性结构</code>：一个节点有多个直接前驱和直接后继，例如1:n,n:n，例如图、树</li></ul><p>划分方法二</p><ul><li><code>集合结构</code> 元素同属于集合，此外无其他关系</li><li><code>线性结构</code> 一对一关系</li><li><code>树形结构</code> 一对多</li><li><code>图状结构</code> 多对多</li></ul><h3 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构" aria-hidden="true">#</a> 存储结构</h3><p><strong>顺序存储结构</strong>.</p><ul><li>用一组连续的存储单元存储数据元素</li><li>数据元素之间的逻辑关系由存储位置来表示</li><li>C语言实现顺序存储结构通常用数组</li></ul><p><strong>链式存储结构</strong>.</p><ul><li>用一组任意的存储单元存储数据元素</li><li>数据元素之间的关系用指针表示</li><li>C语言用指针来实现</li></ul><p><strong>索引存储结构</strong>. 不仅存元素，存一个叫<code>索引表</code><br> 索引表构成：一个个索引项构成，索引项格式 <code>关键字:地址</code> 稠密索引：每个元素都有一个索引项<br> 稀疏索引：一组元素对应一个索引 <strong>散列存储结构</strong>. 利用key关键字计算出元素的存储地址</p><h3 id="应用-数据类型" tabindex="-1"><a class="header-anchor" href="#应用-数据类型" aria-hidden="true">#</a> 应用:数据类型</h3><p>例如在C语言中的int基本数据类型，数组、枚举等构造数据类型，也可以自己定义数据类型</p><p>高级程序语言中数据类型是指明显的或暗含的规定程序执行期间变量和表达的所有取值范围，以及定义在这些数值范围上的操作，例如在C的int类型，表示整数-32768-32762，在整数上可以进行加减乘除</p><p>因此，数据类型可以做如下</p><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h4><p><code>数据类型</code>是一组相同性质的值得集合以及定义在这个集合上的一组操作，即<code>数据类型=值得集合+值集合上的操作</code></p><h3 id="抽象数据类型" tabindex="-1"><a class="header-anchor" href="#抽象数据类型" aria-hidden="true">#</a> 抽象数据类型</h3><h4 id="抽象数据类型的定义" tabindex="-1"><a class="header-anchor" href="#抽象数据类型的定义" aria-hidden="true">#</a> 抽象数据类型的定义</h4><p>是指一个数学模型和在这个数学模型山的一组操作</p><p>以下是解释</p><p>用户从问题出发抽象出数学模型<br> 定义在数学模型上的一组抽象运算 不考虑计算机的具体存储结构和运算的具体实现</p><h4 id="表示" tabindex="-1"><a class="header-anchor" href="#表示" aria-hidden="true">#</a> 表示</h4><p><code>抽象数据类型的表示</code>，如下</p><p><code>(D,S,P)</code>三元组表示</p><ul><li>D表示数据对象</li><li>S是D上的关系集 即数据对象之间的逻辑关系</li><li>P是对D的基本操作集 例如增删改查</li></ul><h4 id="定义格式" tabindex="-1"><a class="header-anchor" href="#定义格式" aria-hidden="true">#</a> 定义格式</h4><p>抽象数据类型的<code>定义格式</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ADT 抽象数据类型名<span class="token punctuation">{</span>
    数据对象<span class="token operator">:</span><span class="token operator">&lt;</span>数据对象的定义<span class="token operator">&gt;</span>
    数据关系：<span class="token operator">&lt;</span>数据关系的定义<span class="token operator">&gt;</span>
    基本操作<span class="token operator">:</span><span class="token operator">&lt;</span>基本操作的定义<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>ADT 抽象数据类型
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本操作的定义</p><ul><li>参数表 为操作提供值</li><li>初始条件 数据结构应该满足的条件</li><li>操作结果</li></ul><p>例如</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ADT circle<span class="token punctuation">{</span>
    数据对象<span class="token operator">:</span>D<span class="token operator">=</span><span class="token punctuation">{</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">|</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y均为实数<span class="token punctuation">}</span>
    数据关系<span class="token operator">:</span>R<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">&gt;</span><span class="token operator">|</span>r是半径，<span class="token operator">&lt;</span>x<span class="token punctuation">,</span>y<span class="token operator">&gt;</span>是圆心坐标<span class="token punctuation">}</span>
    基本操作<span class="token operator">:</span>
        <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>C<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
            初始条件<span class="token operator">:</span>圆已存在
            操作结果<span class="token operator">:</span>计算面积
<span class="token punctuation">}</span>ADT circle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h4><p>这里所谓的实现是指存储结构的实现，如果使用C语言进行实现抽象数据类型，主要包含如下几部分</p><ul><li>定义其存储结构-使用结构体，内部使用已有的数据类型描述</li><li>定义其操作-使用函数</li></ul><h2 id="算法与算法分析" tabindex="-1"><a class="header-anchor" href="#算法与算法分析" aria-hidden="true">#</a> 算法与算法分析</h2><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><h4 id="算法定义" tabindex="-1"><a class="header-anchor" href="#算法定义" aria-hidden="true">#</a> 算法定义</h4><p>算法是指解决问题的方法和步骤，是指命令的有限序列</p><h4 id="算法描述" tabindex="-1"><a class="header-anchor" href="#算法描述" aria-hidden="true">#</a> 算法描述</h4><p>描述一个算法有很多方法，如</p><ul><li>自然语言</li><li>流程图</li><li>伪代码 类语言</li><li>程序代码</li></ul><h4 id="与程序的区别" tabindex="-1"><a class="header-anchor" href="#与程序的区别" aria-hidden="true">#</a> 与程序的区别</h4><p>程序=算法+数据结构</p><h4 id="_5个特性" tabindex="-1"><a class="header-anchor" href="#_5个特性" aria-hidden="true">#</a> 5个特性</h4><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><h4 id="设计要求" tabindex="-1"><a class="header-anchor" href="#设计要求" aria-hidden="true">#</a> 设计要求</h4><ul><li>正确</li><li>可读</li><li>健壮</li><li>高效</li></ul><h3 id="算法分析" tabindex="-1"><a class="header-anchor" href="#算法分析" aria-hidden="true">#</a> 算法分析</h3><p>通过算法分析来衡量算法的效率，衡量算法效率主要有时间效率和空间效率</p><h4 id="时间效率" tabindex="-1"><a class="header-anchor" href="#时间效率" aria-hidden="true">#</a> 时间效率</h4><h5 id="度量的作用" tabindex="-1"><a class="header-anchor" href="#度量的作用" aria-hidden="true">#</a> 度量的作用</h5><p>时间效率的度量<br> 是用来度量程序实际小号的时间</p><h5 id="度量的方法" tabindex="-1"><a class="header-anchor" href="#度量的方法" aria-hidden="true">#</a> 度量的方法</h5><p>时间效率度量主要有如下方法</p><p>事后统计<br> 即实际测量算法运行的时间，但是会受机器配置的影响，同时耗时耗力</p><p>事前分析<br> 是利用估算简单操作的次数来估算时间效率，这是真正使用的方法</p><p>事前分析的基本原理是估算简单操作的次数</p><p>通过事前分析来估算算法运行时间</p><p>首先，了解<code>语句频度</code><br> 语句频度是指每条语句执行的次数</p><p>有了语句频度，就可以估算<code>算法运行时间</code><br><code>算法运行时间=每条语句频度×语句每次运行的时间</code></p><p>算法运行时间公式里的语句每次运行的时间啊，可以简化成单位时间，那么就可以省略成<br><code>算法运行时间=语句频度之和</code></p><h5 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h5><p>有了上面估算方法，可以引出算法的<code>时间复杂度</code>,又称<code>渐进时间复杂度</code></p><p>了解时间复杂度需要知道</p><p>数量级和基本语句概念，<code>数量级</code>是高等数学中的概念简单了解，<code>基本语句</code>是指执行次数最多的语句，通常是指循环嵌套最深的语句</p><p>算法的时间复杂度可以简要的说明称一个同数量级的函数，可以表示成<code>T(n)=O(f(n))</code>,其中求取f(n)是关键</p><p><code>f(n)</code>是指问题规模n的函数，也就是说基本语句的频度就是算法的时间复杂度，基本语句频度=问题规模n的函数取其数量级即可</p><p>时间复杂度具有以下分类</p><ul><li>最坏时间复杂度</li><li>最好时间复杂度</li><li>平均时间复杂度</li></ul><p>以上，比如查找算法查找第一个元素和查找最后一个元素，显然时间复杂度不一样，其原因就是查找的数据不同</p><p>分析一个算法的时间复杂度，首先要了解其分析方法</p><p>分析方法的原理是多项式最高次数定理</p><p>分析的基本步骤</p><ul><li>找出基本语句</li><li>写出问题规模n的函数</li><li>然后取函数的数量级</li></ul><p>若遇到复杂的算法，还可能用以下规则</p><ul><li>加法规则，即若可以写成几个函数相加，取最大函数作为问题规模n的函数</li><li>乘法规则，即若可以写成几个函数相乘，则问题规模函数就是相乘起来</li></ul><p>评价时间复杂度的效率<br> 常对幂指阶，其中常数函数是最优的，也是尽可能要实现的</p><h4 id="空间效率" tabindex="-1"><a class="header-anchor" href="#空间效率" aria-hidden="true">#</a> 空间效率</h4><p>算法的空间效率需要使用空间复杂度来描述<br> 空间复杂度就是描述算法运行所占据的空间，这里所说的空间是指算法额外需要的空间，不是算法自身变量、定义等占据空间，这些空间可以忽略不计</p><p>表示<br><code>S(n)=O(f(n))</code></p>`,124),s=[l];function r(c,o){return e(),i("div",null,s)}const t=a(d,[["render",r],["__file","data-structure-introduce.html.vue"]]);export{t as default};
