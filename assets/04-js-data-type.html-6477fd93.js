import{_ as n,X as a,Y as s,a1 as t}from"./framework-7c93dcdd.js";const e={},o=t(`<h1 id="js数据类型" tabindex="-1"><a class="header-anchor" href="#js数据类型" aria-hidden="true">#</a> JS数据类型</h1><p>ECMAScript有6种简单数据类型</p><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol(6新增)</li></ul><p>一种复杂数据类型<code>object</code>，无序名值对</p><h2 id="typedef操作符" tabindex="-1"><a class="header-anchor" href="#typedef操作符" aria-hidden="true">#</a> typedef操作符</h2><p>由于ECMAScript类型都是松散的，所以需要typeof来确定数据类型，主要会返回如下</p><ul><li>&quot;undefined&quot;表示值未定义</li><li>&quot;boolean&quot;表示值为布尔值</li><li>&quot;string&quot;表示值为字符串</li><li>&quot;number&quot;表示值为数值</li><li>&quot;object&quot;表示值为对象（而不是函数）或 null</li><li>&quot;function&quot;表示值为函数</li><li>&quot;symbol&quot;表示值为符号</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,8),i=[o];function l(c,p){return a(),s("div",null,i)}const r=n(e,[["render",l],["__file","04-js-data-type.html.vue"]]);export{r as default};
