import{_ as n,W as s,X as a,a0 as e}from"./framework-11f0740a.js";const t={},p=e(`<h1 id="c指针变量" tabindex="-1"><a class="header-anchor" href="#c指针变量" aria-hidden="true">#</a> C指针变量</h1><h2 id="定义指针变量" tabindex="-1"><a class="header-anchor" href="#定义指针变量" aria-hidden="true">#</a> 定义指针变量</h2><p><strong>声明一个指针变量</strong><br><code>基类型 *指针变量名</code>，如下</p><p><code>int *pt</code>表示定义一个int类型的指针变量，前面的<code>int</code>意思是定义一个变量该变量存储的地址指向int类型的变量，也叫做基类型，他们不能指向浮点型变量，类似的还有如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">float</span> <span class="token operator">*</span>pt1<span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token operator">*</span>pt2<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化</strong><br> 即定义+赋值同时进行</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span>pt1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> pt2 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>易混淆点</p><ul><li><code>*pt</code>和<code>int *pt</code>之区别，前者是用于取pt指向的变量，后者是指针变量声明时候的标志</li><li>基类型必须指定，原因是取地址只是知道是不够地址是不够用，因为例如int占4个字节，知道地址的同时还要往后取多少字节</li></ul><h2 id="引用指针变量" tabindex="-1"><a class="header-anchor" href="#引用指针变量" aria-hidden="true">#</a> 引用指针变量</h2><p>了解如下</p><ul><li>指针变量赋值</li><li>访问指针变量指向的变量</li><li>输出指针变量</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>pt<span class="token punctuation">;</span>
pt <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span> <span class="token comment">// 指针变量赋值</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *pt 输出i (pt指向的变量)</span>
<span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//给i赋值</span>
i <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// 直接用变量名赋值</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%o&quot;</span><span class="token punctuation">,</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出pt变量存储的i变量的地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面符号如下</p><ul><li><code>&amp;</code>取地址符号</li><li><code>*</code>指针运算符或间接访问符，注意不是声明指针变量的那个<code>*</code></li></ul>`,15),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","02-c-pointer-variable.html.vue"]]);export{d as default};
