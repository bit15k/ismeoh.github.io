import{_ as s,X as a,Y as n,a1 as e}from"./framework-ca96282b.js";const t={},p=e(`<h1 id="js正则表达式" tabindex="-1"><a class="header-anchor" href="#js正则表达式" aria-hidden="true">#</a> JS正则表达式</h1><p>正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</p><p>搜索模式可用于文本搜索和文本替换。</p><ul><li>正则表达式是一个搜索模式</li></ul><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">表达式内容</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>i 表示不区分大小，<code>/ /</code>里是表达式主体内容</p><h2 id="字符串方法" tabindex="-1"><a class="header-anchor" href="#字符串方法" aria-hidden="true">#</a> 字符串方法</h2><ul><li>search方法，传入正则表达式搜索指定内容或传入指定内容搜索，并返回起始位置</li><li>replace方法，传入正则表达式进行替换或传入指定内容替换，并返回替换后的内容</li></ul><p>search方法，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Visit ismeoh&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ismeoh</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回起始6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>search方法，直接传入字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Visit ismeoh&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">&quot;ismeoh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>replace方法类似，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token comment">// replace用法</span>
        <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Visit ismeoh&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> n2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">visit</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
        <span class="token keyword">var</span> n3 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;ismeoh&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式修饰符" tabindex="-1"><a class="header-anchor" href="#正则表达式修饰符" aria-hidden="true">#</a> 正则表达式修饰符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">表达式内容</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上，<code>i</code>所在位置就是修饰符，修饰符除了<code>i</code>还有如下</p><ul><li>i 不区分大小写</li><li>g 执行全局匹配，即查找所有匹配内容，而不是在找到第一个匹配后停止</li><li>m 执行多行匹配</li></ul><h2 id="正则表达式模式" tabindex="-1"><a class="header-anchor" href="#正则表达式模式" aria-hidden="true">#</a> 正则表达式模式</h2><p>方括号，用于查找范围内的值</p><ul><li><code>[abc]</code>查找方括号之间的任何字符。</li><li><code>[0-9]</code>查找任何从 0 至 9 的数字。</li><li><code>(x|y)</code>查找任何以 | 分隔的选项</li></ul><p>元符号拥有特殊含义的符号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\\d  查找数字。
\\s  查找空白字符。
\\b  匹配单词边界。
\\uxxxx  查找以十六进制数 xxxx 规定的 Unicode 字符。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>量词</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>n<span class="token operator">+</span> 匹配任何包含至少一个 n 的字符串。
n<span class="token operator">*</span> 匹配任何包含零个或多个 n 的字符串。
n<span class="token operator">?</span> 匹配任何包含零个或一个 n 的字符串
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="regexp对象" tabindex="-1"><a class="header-anchor" href="#regexp对象" aria-hidden="true">#</a> RegExp对象</h2><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象</p><h3 id="使用test" tabindex="-1"><a class="header-anchor" href="#使用test" aria-hidden="true">#</a> 使用test()</h3><p>test() 方法是一个正则表达式方法。</p><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用-exec" tabindex="-1"><a class="header-anchor" href="#使用-exec" aria-hidden="true">#</a> 使用 exec()</h3><p>exec() 方法是一个正则表达式方法。</p><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p><p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,37),i=[p];function c(l,o){return a(),n("div",null,i)}const d=s(t,[["render",c],["__file","01-js-repx.html.vue"]]);export{d as default};
