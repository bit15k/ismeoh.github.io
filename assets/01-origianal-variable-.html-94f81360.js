import{_ as n,X as s,Y as a,a0 as t}from"./framework-5ccfa493.js";const e={},p=t(`<h1 id="js原始值和引用值" tabindex="-1"><a class="header-anchor" href="#js原始值和引用值" aria-hidden="true">#</a> JS原始值和引用值</h1><p>原始值:最简单的数据,原始值是按值存储，可以直接访问</p><p>常见的6种原始值</p><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol</li></ul><p>引用值:由多个数据构成的对象保存于内存中，要想访问必须用引用访问，即通过一个变量保存对象的地址，用此变量访问对象，又叫做按引用访问对象</p><h2 id="动态属性" tabindex="-1"><a class="header-anchor" href="#动态属性" aria-hidden="true">#</a> 动态属性</h2><ul><li>是指引用值可以动态的添加、删除、修改删除其属性和方法，但是原始值不存在这种用法，如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Nicholas&quot;</span>

<span class="token comment">// 原始值，不存在下面使用方法，尽管不会报错</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">;</span> 
name<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复制值" tabindex="-1"><a class="header-anchor" href="#复制值" aria-hidden="true">#</a> 复制值</h2><p>原始值是直接复制，引用值复制的地址(指针)</p><p>原始值复制如图所示<br><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202010625.png" alt="20230202010625"></p><p>引用值复制如图所示<br><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202010717.png" alt="20230202010717"><br> 删除任何一个不会影响另外一个，如图<br><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202010818.png" alt="20230202010818"></p><h2 id="参数传递" tabindex="-1"><a class="header-anchor" href="#参数传递" aria-hidden="true">#</a> 参数传递</h2><p>即原始值和对象传入函数的情况<br> 原始值时按值传递的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token keyword">function</span> <span class="token function">addTen</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            num <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">addTen</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20，没有变化</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象也是按值传递的，不是按引用传递的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">;</span> 
        obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Greg&quot;</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">setName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Nicholas&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上代码，若对象是按引用传递的 ，那么最后输出的结果应该是Greg,对于上面的执行结果可以理解如下</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202035507.png" alt="20230202035507"><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202035549.png" alt="20230202035549"><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202035627.png" alt="20230202035627"><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202035643.png" alt="20230202035643"></p><p>对象存在堆内存，基本数据类型存在栈内存，所以创建一个对象等同再堆内存开辟一块存储对象，再在栈内存开辟一块存储对象实际地址。<br> 因此对象作为参数传入给函数实参，其实是实参和形参指向全局作用域的对象。<br> 在函数局部作用域内修改对象属性肯定会反应给外部全局。但是赋值给实参一个基本数据类型或重新new 一个对象给实参，前者直接覆写了基本数据类型，后者直接覆写开辟了一个新的对象指向它，而且这都是在局部作用域内。<br> 随着函数的销毁而消失。不能说成是引用的本质原因是存在局部和全局作用域的原因</p>`,20),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","01-origianal-variable-.html.vue"]]);export{r as default};
