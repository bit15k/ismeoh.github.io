import{_ as n,X as s,Y as a,a1 as e}from"./framework-ca96282b.js";const i={},p=e(`<h1 id="预处理指令" tabindex="-1"><a class="header-anchor" href="#预处理指令" aria-hidden="true">#</a> 预处理指令</h1><p>预处理指令是指发生在编译前，在编译前需要将预处理指令进行处理，预处理指令不是C的一部分</p><p>预处理指令主要包含如下几个</p><ul><li>宏定义</li><li>文件包含</li><li>条件编译</li></ul><h2 id="宏定义" tabindex="-1"><a class="header-anchor" href="#宏定义" aria-hidden="true">#</a> 宏定义</h2><p>宏定义是指利用标识符来代替字符串</p><p><code>宏定义</code>的基本格式<code>#define 标识符 字符串</code><br> 例如<code>#define PI 3.14156</code>表示定义一个符号常量<br><code></code>带参宏定义<code>基本格式</code>#define 宏名称(参数) 字符串<code> 例如</code>#define S(a,b) a*b\`</p><h2 id="文件包含" tabindex="-1"><a class="header-anchor" href="#文件包含" aria-hidden="true">#</a> 文件包含</h2><p>文件包含是指将另外一个源文件包含进来</p><p>文件包含两种写法</p><ul><li>写法1 <code>#include &quot;文件名&quot;</code>,例如<code>#include &quot;a.cpp&quot;</code> 这种写法是先查找当前工作目录</li><li>写法2 <code>#include &lt;文件名&gt;</code>,这种写法是先查找查找系统目录</li></ul><p>通常，我们将头文件包含进来，<code>.h</code>，头文件通常书写如下内容</p><ul><li>定义常量</li><li>定义宏函数</li><li>函数声明</li><li>结构体</li><li>类型定义</li><li>函数原型</li></ul><h2 id="条件编译" tabindex="-1"><a class="header-anchor" href="#条件编译" aria-hidden="true">#</a> 条件编译</h2><p>条件编译是指根据条件制定哪一部分编译哪一部分不编译</p><p>基本格式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">标识符或表达式</span></span>
程序段<span class="token number">1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
程序段<span class="token number">2</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用标识符，通常与宏定义一块使用，用于调试程序</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//#define FLAG</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">FLAG</span></span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x=&quot;</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// FLAG</span></span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;y=&quot;</span> <span class="token operator">&lt;&lt;</span> y<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序如果取消#define注释那么就会输出x,这里表示如果标识符存在</p>`,20),c=[p];function t(l,o){return s(),a("div",null,c)}const r=n(i,[["render",t],["__file","预处理指令.html.vue"]]);export{r as default};
