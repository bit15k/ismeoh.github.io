import{_ as n,X as s,Y as a,a1 as t}from"./framework-ca96282b.js";const e={},p=t(`<h1 id="js事件" tabindex="-1"><a class="header-anchor" href="#js事件" aria-hidden="true">#</a> JS事件</h1><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><p><strong>事件</strong>是指文档或浏览器比较有意义的时刻，比如当你敲击完键盘、鼠标点击完一个按钮，都会触发一个事件，该事件本质是一个函数</p><h2 id="事件流" tabindex="-1"><a class="header-anchor" href="#事件流" aria-hidden="true">#</a> 事件流</h2><p><strong>事件流</strong>表示页面接受事件的顺序，例如你点击按钮这个事件是最后被接受还是先被接受，这就叫事件流</p><p>事件流主要分为两种，一是冒泡事件，二是捕获事件</p><h3 id="冒泡事件" tabindex="-1"><a class="header-anchor" href="#冒泡事件" aria-hidden="true">#</a> 冒泡事件</h3><p><strong>冒泡事件</strong>也是叫作 <strong>IE事件</strong>，是指事件会从最先触发事件之元素，依次往上触发相应的其他事件，比如如下</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
&lt;head&gt; 
 &lt;title&gt;Event Bubbling Example&lt;/title&gt; 
&lt;/head&gt; 
&lt;body&gt; 
 &lt;div id=&quot;myDiv&quot;&gt;Click Me&lt;/div&gt; 
&lt;/body&gt; 
&lt;/html&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击<code>Click Me</code>会先触发所在<code>div-&gt;body-&gt;html-document</code></p><h3 id="事件捕获" tabindex="-1"><a class="header-anchor" href="#事件捕获" aria-hidden="true">#</a> 事件捕获</h3><p><strong>事件捕获</strong>与事件冒泡正好相反，具体节点最后收到事件，事件捕获是由Netscape Communicator提出</p><p>例如如上，顺序变成了<code>document-&gt;html-&gt;body-&gt;div</code></p><h3 id="dom事件流" tabindex="-1"><a class="header-anchor" href="#dom事件流" aria-hidden="true">#</a> DOM事件流</h3><p><strong>DOM事件流</strong>是指<code>DOM2 Event</code>规范所规定的事件流，其规定事件流由三个阶段构成，<code>事件捕获阶段、事件到达、事件冒泡阶段</code>，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230218140704.png" alt="20230218140704"></p><h2 id="事件处理程序" tabindex="-1"><a class="header-anchor" href="#事件处理程序" aria-hidden="true">#</a> 事件处理程序</h2><p><strong>事件处理程序</strong>是指当响应事件所调用的函数，通常是以<code>on</code>开头，比如下面的例子<code>onclick</code></p><h3 id="html事件处理程序" tabindex="-1"><a class="header-anchor" href="#html事件处理程序" aria-hidden="true">#</a> HTML事件处理程序</h3><p><strong>HTML事件处理程序</strong>是指直接直接在HTML的属性名上进行，属性的值必须是JavaScript代码，如下<code>onclick</code>是HTML的一个属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;Click Me&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;console.log(&#39;Clicked&#39;)&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;Click Me&quot;</span> 
onclick<span class="token operator">=</span><span class="token string">&quot;console.log(&amp;quot;Clicked&amp;quot;)&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
 <span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> 
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;Click Me&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;showMessage()&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom0事件处理程序" tabindex="-1"><a class="header-anchor" href="#dom0事件处理程序" aria-hidden="true">#</a> DOM0事件处理程序</h3><p><strong>DOM0事件处理程序</strong>是指把一个函数赋值给DOM元素的一个属性，例如如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;myBtn&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>btm.onclick</code>的<code>onclick</code>是元素的一个属性，并且函数内部的<code>this</code>指向元素本身，如果想要<strong>移除事件</strong>可以使用赋值语句将<code>btn.onclick=null</code></p><h3 id="dom2事件处理程序" tabindex="-1"><a class="header-anchor" href="#dom2事件处理程序" aria-hidden="true">#</a> DOM2事件处理程序</h3><p><strong>DOM2事件处理程序</strong>是指DOM2 Event为事件处理程序专门定义了两个方法，用来进行事件的绑定和移除<code>addEventListener()</code>和 <code>removeEventListener()</code>，例如如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述通过<code>addEventListener</code>方法为btn元素绑定了点击事件，其中参数的意义如下</p><ul><li><code>参数1</code> 表示绑定的事件名称</li><li><code>参数2</code> 表示事件触发后处理函数</li><li><code>参数3</code> 是一个布尔值，为<code>true</code>表示事件捕获方式，<code>false</code>表示在冒泡捕获方式(默认)</li></ul><p>使用<code>removeEventListener</code>进行移除绑定事件，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 有效果\`\`\`！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是使用<code>removeEventListener</code>移除，是无法移除匿名函数的。比如在介绍<code>addEventListener</code>举例使用的是匿名函数，因此无法移除</p><p>使用DOM2事件处理程序优点是可以为同一个元素绑定多个事件</p><h3 id="ie事件处理程序" tabindex="-1"><a class="header-anchor" href="#ie事件处理程序" aria-hidden="true">#</a> IE事件处理程序</h3><p>IE事件处理程序是IE特有的类似DOM2事件处理程序，通用使用两个方法进行即 <code>attachEvent()</code>和 <code>detachEvent()</code></p><p>与DOM2事件处理基本使用相同，但是有如下的差异需要特别注意</p><ul><li>只支持事件冒泡，即<code>attachEvent()</code>没有第三个参数</li><li><code>attachEvent()</code>的<code>参数1</code>事件名不同，例如DOM0事件处理程序是<code>click</code>而这里是<code>onclick</code></li><li><code>attachEvent()</code>的<code>参数2</code>绑定的事件处理函数中的this不同，这里的<strong>this</strong>指向全局Window对象</li></ul><p>上述差异，例子如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onclick&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onclick&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跨浏览器事件处理方法" tabindex="-1"><a class="header-anchor" href="#跨浏览器事件处理方法" aria-hidden="true">#</a> 跨浏览器事件处理方法</h3><p><strong>跨浏览器事件处理方法</strong>是为了处理不同浏览器中处理事件的差异IE或Chrome，可以自行编写方法，也可以调用别人写好的方法，这里主要介绍的是自己编写的通用方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个对象</span>
<span class="token keyword">var</span> EventUtil <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token comment">// 定义方法用于添加绑定事件</span>
 <span class="token comment">// 参数1表示HTML元素，参数2表示自定义类型，参数3表示绑定的处理函数</span>
 <span class="token function-variable function">addHandler</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token comment">// 判断使用哪一个绑定事件的方法</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
 <span class="token comment">// 都不满足则使用自定义type类型</span>
 element<span class="token punctuation">[</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
 <span class="token punctuation">}</span><span class="token punctuation">,</span> 
 <span class="token comment">// 定义一个移除绑定的方法</span>
 <span class="token function-variable function">removeHandler</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
 element<span class="token punctuation">[</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用</span>
<span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">let</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 其他代码</span>
EventUtil<span class="token punctuation">.</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象" aria-hidden="true">#</a> 事件对象</h2><p><strong>事件对象</strong>是指任何一个事件所触发都会将相关信息，如导致事件的元素（如点击按钮就是指按钮）、事件的类型（如点击事件）等等存入一个专门的对象保存，这个对象叫做<code>event</code>对象</p><h3 id="dom事件对象" tabindex="-1"><a class="header-anchor" href="#dom事件对象" aria-hidden="true">#</a> DOM事件对象</h3><p><strong>DOM事件对象</strong>是指任何一个符合DOM标准的浏览器，在事件触发的时候，都会将<code>event</code>对象传入，例如如下</p><p>使用DOM0和DOM2事件处理程序把<code>event</code>对象传入的例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// enent </span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;click&quot; </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// enent </span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;click&quot; </span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用HTML事件处理程序将<code>event</code>对象传入的例子</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Click Me<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="event对象常用属性及方法" tabindex="-1"><a class="header-anchor" href="#event对象常用属性及方法" aria-hidden="true">#</a> event对象常用属性及方法</h4><ul><li><code>bubbles</code> 布尔值 只读 表示事件是否冒泡</li><li><code>cancelable</code> 布尔值 只读 表示是否可以取消事件的默认行为</li><li><code>currentTarget</code> 元素 只读 当前事件处理程序所在的元素</li><li><code>defaultPrevented</code> 布尔值 只读 true 表示已经调用 preventDefault()方法（DOM3 Events 中新增）</li><li><code>detail</code> 整数 只读 事件相关的其他信息</li><li><code>eventPhase</code> 整数 只读 表示调用事件处理程序的阶段：1 代表捕获阶段，2 代表 到达目标，3 代表冒泡阶段</li><li><code>preventDefault()</code> 函数 只读 用于取消事件的默认行为。只有 cancelable 为 true 才 可以调用这个方法</li><li><code>stopImmediatePropagation()</code> 函数 只读 用于取消所有后续事件捕获或事件冒泡，并阻止调用任 何后续事件处理程序（DOM3 Events 中新增）</li><li><code>stopPropagation()</code> 函数 只读 用于取消所有后续事件捕获或事件冒泡。只有 bubbles 为 true 才可以调用这个方法</li><li><code>target</code> 元素 只读 事件目标</li><li><code>trusted</code> 布尔值 只读 true 表示事件是由浏览器生成的。false 表示事件是开 发者通过 JavaScript 创建的（DOM3 Events 中新增）</li><li><code>type</code> 字符串 只读 被触发的事件类型</li><li><code>View AbstractView</code> 只读 与事件相关的抽象视图。等于事件所发生的 window 对象</li></ul><p>常用的有<code>cancelable</code>、<code>stopPropagation()</code>、<code>target</code></p><h3 id="ie事件对象" tabindex="-1"><a class="header-anchor" href="#ie事件对象" aria-hidden="true">#</a> IE事件对象</h3><p>NF</p>`,56),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","事件.html.vue"]]);export{d as default};
