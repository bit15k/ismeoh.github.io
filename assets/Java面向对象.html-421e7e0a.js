import{_ as a,W as n,X as s,a0 as e}from"./framework-0a321081.js";const t={},p=e(`<h1 id="java面向对象" tabindex="-1"><a class="header-anchor" href="#java面向对象" aria-hidden="true">#</a> Java面向对象</h1><h2 id="面向对象一些概念" tabindex="-1"><a class="header-anchor" href="#面向对象一些概念" aria-hidden="true">#</a> 面向对象一些概念</h2><p><strong>面向对象程序设计</strong>是指程序是由一个个对象组成的，每个对象已有公开的部分和隐藏的部分</p><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h3><p>了解面向对象，首先要了解<strong>类的概念</strong></p><p><strong>类</strong>是构造对象的模板，可以想象成一台机器的设计图纸和真实创造出来的机器；我们由类构造的对象也叫做创建类的实例</p><p>对于隐藏部分，我们引入了<strong>封装的概念</strong>，封装也叫作数据隐藏，对于使用该对象的人，看不见对象里的数据也无法操作</p><p>对象中存在的数据，我们称作<strong>实例域</strong></p><p>对象中操作数据的过程，我们称作<strong>方法</strong></p><p>对于每一个对象其实例域的值都是不同的，因此我们叫做<strong>对象当前的状态</strong></p><p>上面我们说明的了封装的概念，这里说明封装的关键，对于类绝对不能让类的方法直接访问其他类的实例域，如果想访问，只能通过对象的方法访问对象的数据，这是<strong>封装设计的要求</strong></p><p>对于面向对象，还有一个重要的设计原则就是可以<strong>扩展一个类来建立一个新类</strong>，例如父类与子类的关系，通常也叫作超类和派生类，也叫作<strong>继承关系</strong></p><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><p>我们已经知道了由类所创建的实例就是叫做对象，那么对象有哪些特性呢</p><ul><li>对象的行为，即方法，对象要施加哪些操作</li><li>对象的状态，即当使用方法后对象内部数据如何进行响应变化，即之前介绍的实例域中的数据如何变化</li><li>对象的标识，如何理解，每一个类是一个模板，通过模板是可以创造很多对象，如何区分这就是对象标识的含义，每一个对象 标识是永远不同的，同样每一个对象的状态也是不同</li></ul><h3 id="类、方法的确定" tabindex="-1"><a class="header-anchor" href="#类、方法的确定" aria-hidden="true">#</a> 类、方法的确定</h3><p>我们通常所说的名词一般是类，比如人、动物、狗、猫等等，当然这不是唯一的</p><p>一般动词算作方法，同样也不是唯一的</p><h3 id="类与类关系" tabindex="-1"><a class="header-anchor" href="#类与类关系" aria-hidden="true">#</a> 类与类关系</h3><p>类和类之间通常有种关系</p><ul><li>依赖</li><li>聚合</li><li>继承</li></ul><p>下面分别说明</p><p><strong>依赖</strong>最好理解的是英文说法uses a,即若a类通过方法操纵了另一个类b的对象，我们就叫做依赖；依赖一般要少用，减少其耦合度</p><p><strong>聚合</strong>是指has a，例如一个a对象包含一些b对象</p><p><strong>继承</strong>是指is a,例如父与子就是继承关系</p><p>下面介绍一些UML绘制图中如何表示上述关系的符号</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/Java面向对象-2023-02-24-17-53-14.png" alt="Java面向对象-2023-02-24-17-53-14"></p><h2 id="预定义类" tabindex="-1"><a class="header-anchor" href="#预定义类" aria-hidden="true">#</a> 预定义类</h2><p>上面我们介绍面向对象的基本概念，下面我们进入Java中预定义类</p><p>我们所说的预定义类就是指Java自带一些类库，如<code>Data</code>、<code>Math</code>类；这里需要注意的一点，尽管Java是面向对象的语言，并使用类来描述；但是并不是所有类都具有面向对象的特征，比如我们在一个类中只编写方法，例如<code>Math</code>类</p><h3 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h3><p>Java提供给我们一些预定义类，那么如何使用这些预定义类呢？同样我们要将类实例化，这里需要使用<strong>构造器</strong>来创建类的实例</p><p>构造器的名字是与类的名字一样，要想使用构造器需要使用<code>new</code>关键字</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里构造预定义类Date</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构造器是可以传入一些值，例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此处将new Date所创建的对象传递  </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，也可以调用对象的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们说一个类可以创建多个对象，那么使用new关键字，构造多个对象可以将其保存在一个变量中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Date</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于保存这个对象的变量我们叫做<strong>对象变量</strong>，我们需要搞清楚这个变量保存的是什么，如上面的d1、d2,我们说这些变量保存的是引用</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/Java面向对象-2023-02-24-18-16-21.png" alt="Java面向对象-2023-02-24-18-16-21"></p><p>对象变量保存的是指向对象的地址，如果出现以下这种情况会报错，因为他并没有指向任何一个对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Date</span> d3<span class="token punctuation">;</span> <span class="token comment">// d3没有指向任何一个对象，系统默认赋值NULL  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以我们必须初始化对象变量，或者将另外一个对象变量赋值给他</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">Date</span> d4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Date</span> d5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Date</span> d6<span class="token punctuation">;</span>
d6 <span class="token operator">=</span> d5<span class="token punctuation">;</span><span class="token comment">// 将另外一个已经初始化的变量赋值给他  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/Java面向对象-2023-02-24-18-21-48.png" alt="Java面向对象-2023-02-24-18-21-48"></p>`,47),c=[p];function o(i,l){return n(),s("div",null,c)}const r=a(t,[["render",o],["__file","Java面向对象.html.vue"]]);export{r as default};
