import{_ as n,X as s,Y as a,a1 as e}from"./framework-7c93dcdd.js";const t={},p=e(`<h1 id="node事件驱动风格编程" tabindex="-1"><a class="header-anchor" href="#node事件驱动风格编程" aria-hidden="true">#</a> Node事件驱动风格编程</h1><h2 id="常见编程模型" tabindex="-1"><a class="header-anchor" href="#常见编程模型" aria-hidden="true">#</a> 常见编程模型</h2><p>阻塞式编程模型</p><p>一个进程对应一个用户，进行下一步操作前必须结束上一个操作<br> 缺点：性能低</p><p>现实生活<br> 1.点菜<br> 2.厨师做菜（阻塞）<br> 3.做完再吃</p><p>多线程编程模型</p><p>类似进程，只不过是在同一进程下与其他线程共享，实现了一个线程等待IO，另外一个线程可以接管CPU进行操作</p><p>现实生活<br> 1.点菜<br> 2.厨师做菜<br> 3.有事出去<br> 4.开一个分身等菜<br> 5.厨师继续做下一个客人的菜</p><h2 id="事件驱动-异步-编程模型" tabindex="-1"><a class="header-anchor" href="#事件驱动-异步-编程模型" aria-hidden="true">#</a> 事件驱动(异步)编程模型</h2><p>以下是阻塞式编程典型例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;select * from posts where id = 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_something_with</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查询表结果，并将返回结果存储<br> 利用这个结果做其他事情<br> 上述，缺点是查询不结束，下面代码无法运行</p><p>更换事件驱动编程，可以写成如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">query_finished</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">do_something_with</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;select * from posts where id = 1&#39;</span><span class="token punctuation">,</span> query_finshed<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上，解释<br> 先定义一个查询执行完毕调用的函数，这个函数是个匿名函数<br> 调用查询，第二个参数传入一个函数名<br> 当查询结束后，调用该函数</p>`,15),i=[p];function c(o,r){return s(),a("div",null,i)}const u=n(t,[["render",c],["__file","event-driven-style-programming.html.vue"]]);export{u as default};
