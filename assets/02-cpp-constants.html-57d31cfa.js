import{_ as a,X as n,Y as s,a1 as e}from"./framework-ca96282b.js";const c={},p=e(`<h1 id="c-常量" tabindex="-1"><a class="header-anchor" href="#c-常量" aria-hidden="true">#</a> C++常量</h1><p>常量是指不可改变的量，主要分为如下</p><ul><li>数值型常量，<code>10</code></li><li>字符型常量，包含在\` \`里的量</li></ul><h2 id="数值常量" tabindex="-1"><a class="header-anchor" href="#数值常量" aria-hidden="true">#</a> 数值常量</h2><p>数值常量也是分类型的，主要包含如下</p><ul><li>整型常量</li></ul><h3 id="整型常量" tabindex="-1"><a class="header-anchor" href="#整型常量" aria-hidden="true">#</a> 整型常量</h3><p>对应数据类型中int，比如<code>10</code>至于整型常量的范围不需要掌握，用到查询即可</p><p>整型常量的表达方法，主要有如下三种</p><ul><li>十进制数</li><li>八进制数</li><li>十六进制数</li></ul><p>十进制数字需要在数字尾部加<code>l</code>或<code>L</code>，例如<code>10L</code><br> 八进制数字需要在开头加<code>0</code>,八进制的<code>020</code>代表十进制<code>16</code><br> 十六进制在数字的开头加<code>0x</code>或<code>0X</code>，例如<code>0x20</code>即32</p><h3 id="浮点型常量" tabindex="-1"><a class="header-anchor" href="#浮点型常量" aria-hidden="true">#</a> 浮点型常量</h3><p>表达方式主要有两种</p><ul><li>十进制小数</li><li>指数形式</li></ul><p><strong>十进制小数形式</strong><br> 例如<code>0.12345</code>，主要包含整数部分和小数部分，浮点数常量根据数据类型主要分为两种</p><ul><li>双精度浮点类型常量</li><li>单精度浮点类型常量</li></ul><p><strong>双精度浮点类型常量</strong>，一般默认是双精度，例如<code>0.123</code>，其一般占内存8字节<br><strong>单精度浮点类型常量</strong>，在数字后面加<code>f或F</code></p><hr><p><strong>指数形式表达</strong><br> 主要形式<code>0.123e10</code>，具体如下</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202230044.png" alt="20230202230044"></p><h2 id="字符常量" tabindex="-1"><a class="header-anchor" href="#字符常量" aria-hidden="true">#</a> 字符常量</h2><p>主要分为如下两种</p><ul><li>普通字符常量</li><li>转义字符常量</li></ul><h3 id="普通字符常量" tabindex="-1"><a class="header-anchor" href="#普通字符常量" aria-hidden="true">#</a> 普通字符常量</h3><p>\` \`包裹的内容，例如\`a\`，需要注意的是</p><ul><li>只能包含一个字符</li><li>只占1字节</li><li>区分大小写</li></ul><h3 id="转义字符常量" tabindex="-1"><a class="header-anchor" href="#转义字符常量" aria-hidden="true">#</a> 转义字符常量</h3><p>例如<code>\\n</code>不表示字母n，而表示换行符</p><p>常见的转义字符查询</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202230826.png" alt="20230202230826"></p><p>注：转义字符尽管包含两个字符，但是仍然占1个字节，编译系统会将ASCII码进行转换</p><blockquote><p>字符数据在计算机存储是以ASCII码存储的，所以字符数据可以赋值给整型变量，反之也可将&gt;&gt;整型数据赋值给字符变量</p></blockquote><p>常用ASCII码表</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202231749.png" alt="20230202231749"></p><h3 id="字符串常量" tabindex="-1"><a class="header-anchor" href="#字符串常量" aria-hidden="true">#</a> 字符串常量</h3><p>使用&quot; &quot;包裹起来的内容，例如<code>&quot;abc&quot;</code><br> 字符串常量，占4个字节</p><p>字符串常量在内存中的表示</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202232339.png" alt="20230202232339"></p><p>其中<code>\\0</code>不是字符串的一部分，因此当输出的时候不会输出</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;abc&quot;</span><span class="token operator">&lt;&lt;</span>endl <span class="token comment">//abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>char类型不能使用<code>&quot; &quot;</code>，因为只能包含一个字符</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> c<span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>  <span class="token comment">//❌</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="符号常量" tabindex="-1"><a class="header-anchor" href="#符号常量" aria-hidden="true">#</a> 符号常量</h3><p>cpp可以使用<code>#define</code>来定义一个符号常量，例如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRICE</span> <span class="token expression"><span class="token number">30</span></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num<span class="token punctuation">.</span>total<span class="token punctuation">;</span>
    num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    total <span class="token operator">=</span> num <span class="token operator">*</span>PRICE<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;total=&quot;</span><span class="token operator">&lt;&lt;</span>total<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点</p><ul><li>明确含义</li><li>一改全改</li></ul>`,47),t=[p];function o(i,l){return n(),s("div",null,t)}const r=a(c,[["render",o],["__file","02-cpp-constants.html.vue"]]);export{r as default};
