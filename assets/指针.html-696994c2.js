import{_ as n,X as s,Y as a,a1 as e}from"./framework-ca96282b.js";const t={},p=e(`<h1 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h1><h2 id="一些概念" tabindex="-1"><a class="header-anchor" href="#一些概念" aria-hidden="true">#</a> 一些概念</h2><p><strong>指针</strong>就是地址，记录存储变量的那块区域的内存地址，形象化的称作指向或指针</p><p><strong>直接访问</strong>利用变量名进行访问数据叫做直接访问,比如下面</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>间接访问</strong>如下图，一个变量存储另外一个变量的地址，然后通过该变量存储的地址找到它指向的变量<br><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202191414.png" alt="20230202191414"></p><p>C语言中用于 <strong>定义存储地址的类型</strong>，如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>pt<span class="token punctuation">;</span> <span class="token comment">// 定义存储指向整型的地址</span>
pt <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span> <span class="token comment">// 取i地址给pt存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问i，也可以通过 <strong>直接访问</strong>和 <strong>间接访问</strong>,如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接访问</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 间接访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>*pt</code>,表示先取出pt存的地址，然后通过该地址进行访问，最后取出i存的变量</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230202192734.png" alt="20230202192734"></p><p>\`<em>pt</em>和i都是表示i，例如给i赋值有两种写法</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>*pt</code>是指自己通过地址找到的i变量，<code>i</code>是指通过操作编译后直接通过变量名访问</p><p><strong>指针变量</strong> 即一个变量专门用来存储地址,或者叫做指针变量存储的是地址;指针是指地址，指针变量是一个变量</p><h2 id="指针变量" tabindex="-1"><a class="header-anchor" href="#指针变量" aria-hidden="true">#</a> 指针变量</h2><h3 id="声明与初始化" tabindex="-1"><a class="header-anchor" href="#声明与初始化" aria-hidden="true">#</a> 声明与初始化</h3><p><strong>声明一个指针变量</strong><br><code>基类型 *指针变量名</code>，如下</p><p><code>int *pt</code>表示定义一个int类型的指针变量，前面的<code>int</code>意思是定义一个变量该变量存储的地址指向int类型的变量，也叫做<strong>基类型</strong>，他们不能指向浮点型变量，类似的还有如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">float</span> <span class="token operator">*</span>pt1<span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token operator">*</span>pt2<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化</strong><br> 即定义+赋值同时进行</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span>pt1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> pt2 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>易混淆点</p><ul><li><code>*pt</code>和<code>int *pt</code>之区别，前者是用于取pt指向的变量，后者是指针变量声明时候的标志</li><li><strong>基类型必须指定</strong>，原因是取地址只是知道是不够地址是不够用，因为例如int占4个字节，知道地址的同时还要往后取多少字节</li></ul><h3 id="与-的应用" tabindex="-1"><a class="header-anchor" href="#与-的应用" aria-hidden="true">#</a> &amp;与*的应用</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>pt<span class="token punctuation">;</span>
pt <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span> <span class="token comment">// 指针变量赋值</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *pt 输出i (pt指向的变量)</span>
<span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//给i赋值</span>
i <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// 直接用变量名赋值</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%o&quot;</span><span class="token punctuation">,</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出pt变量存储的i变量的地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面符号如下</p><ul><li><code>&amp;</code>取地址符号</li><li><code>*</code>指针运算符或间接访问符，<code>*p</code>表示p指向的对象，注意不是声明指针变量的那个<code>*</code></li></ul>`,29),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","指针.html.vue"]]);export{d as default};
