import{_ as s,W as n,X as a,a0 as p}from"./framework-0a321081.js";const e={},t=p(`<h1 id="java反射" tabindex="-1"><a class="header-anchor" href="#java反射" aria-hidden="true">#</a> Java反射</h1><p>Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为动态语言的关键</p><h2 id="class类" tabindex="-1"><a class="header-anchor" href="#class类" aria-hidden="true">#</a> Class类</h2><p>要了解反射，首先了解一个特殊的类Class类</p><p>Class类，第一其就是一个类，第二，既然是类其肯定可以创建对应的对象。那么Class类里面存的什么内容？里面存着一些有关对象的运行信息（也叫作对象运行标识），比如对象所属的类，通过这个Class类里面的方法，我们可以访问到这些信息</p><h3 id="获取class类对象" tabindex="-1"><a class="header-anchor" href="#获取class类对象" aria-hidden="true">#</a> 获取Class类对象</h3><p>既然是一个Class类，那么其肯定可以获取其对应的对象，获取一个Class类对象的方法有三种</p><ul><li><code>对象名.getClass()</code></li><li><code>Class.forName(&quot;类名&quot;)</code></li><li><code>类名.class</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取该Class类的一个对象-方法1</span>
<span class="token class-name">Class</span> c1 <span class="token operator">=</span> dog<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// class org.example.Dog 含义该对象的类型是Dog</span>
<span class="token comment">// 通过Class类创建对象的getName方法获取类名</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// org.example.Dog</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// org.example.Dog</span>

<span class="token class-name">String</span> cName <span class="token operator">=</span> <span class="token string">&quot;org.example.Dog&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 通过类名获取Class类创建的对象-方法2</span>
<span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// org.example.Dog</span>

<span class="token comment">// 获取Class类对象-方法3</span>
<span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// int</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>c3 <span class="token operator">==</span> c1<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
<span class="token punctuation">}</span>
    

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于Class类对象可以做如下总结</p><ul><li><p>一个类的对象对应一个Class类对象，通过这个Class对象你可以访问到许多关于该对象的信息，即每一个类型都对应管理一个Class类对象<br> 例如上面，Dog类创建的对象，对应一个Class类对象，通过该Class类对象可以访问到Dog对象所对应的类名等信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">Dog</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token class-name">Class</span>类对象←<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Class</span>类
   ↑              ↓
   ↑<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>←<span class="token operator">--</span><span class="token operator">--</span>类型

  <span class="token class-name">Cat</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token class-name">Class</span>类对象←<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Class</span>类 
   ↑              ↓
   ↑<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>←<span class="token operator">--</span><span class="token operator">--</span>类型

  <span class="token class-name">Tiger</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token class-name">Class</span>类对象←<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Class</span>类
   ↑              ↓
   ↑<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>←<span class="token operator">--</span><span class="token operator">--</span>类型
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Java虚拟机运行时会自动创建(加载)所有类对应的Class类对象，这也就是为什么我们上面是直接通过三种方法获取，而没有使用<code>new</code>关键字先创建Class类对象</p></li><li><p>Class类是一个泛型类，这也就也是了每一个类都可以借助Class类获取信息 <img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/反射-2023-02-24-14-14-16.png" alt="反射-2023-02-24-14-14-16"></p></li></ul><p>那么既然都是Class类所创建的对象，那么就可以通过<code>==</code>进行比较</p><h3 id="class类对象的比较" tabindex="-1"><a class="header-anchor" href="#class类对象的比较" aria-hidden="true">#</a> Class类对象的比较</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>c3 <span class="token operator">==</span> c1<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面，我们比较的是什么？比较的是对象的类型，那么什么是对象的类型，就是其所对应类</p><h3 id="class类动态创建对象" tabindex="-1"><a class="header-anchor" href="#class类动态创建对象" aria-hidden="true">#</a> Class类动态创建对象</h3><p>我们所说每一个类都对应一个Class类对象，通过该Class对象可以访问到类的有关信息，那么每一个类所创建的Class类对象也是有类型的，例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Dog</span>类 <span class="token operator">-&gt;</span> <span class="token class-name">Class</span>类的对象  
  ↑         ↓
  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>类型

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们可以通过Class类的<code>newInstance</code>方法动态的创建，Dog类的对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 先获取该对象的Class类对象，然后通过newInstance创建一个对象</span>
 <span class="token class-name">Dog</span> dog2 <span class="token operator">=</span> dog<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">String</span> cName <span class="token operator">=</span> <span class="token string">&quot;org.example.Dog&quot;</span><span class="token punctuation">;</span>
 <span class="token class-name">Dog</span> dog3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">Dog</span> dog4 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[t];function c(l,i){return n(),a("div",null,o)}const r=s(e,[["render",c],["__file","反射.html.vue"]]);export{r as default};
