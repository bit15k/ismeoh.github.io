import{_ as e,W as a,X as d,a0 as r}from"./framework-0a321081.js";const c={},p=r('<h1 id="java继承和多态" tabindex="-1"><a class="header-anchor" href="#java继承和多态" aria-hidden="true">#</a> Java继承和多态</h1><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>继承是指父与子的关系</p><h3 id="父类" tabindex="-1"><a class="header-anchor" href="#父类" aria-hidden="true">#</a> 父类</h3><p>我们所说的父类，有好几种说法，如超类、基类、派生类、孩子类</p><p>在程序中是使用<code>extends 父类</code>关键字来实现继承关系</p><p>下面这张图可以描述父类和子类的关系</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/Java继承和多态-2023-02-25-17-57-56.png" alt="Java继承和多态-2023-02-25-17-57-56"></p><p>我们所说雇员与经理之间的关系是父与子的关系，父类通常只拥有最基础的属性和方法，子类通常拥有一些额外独有的属性和方法，例如经理拥有设置奖金的能力，因此要增加一个独有的方法和属性</p><p>因此，子类要比父类更丰富</p><p>对于子类从父类继承来的方法，子类是可以覆写的，如获取薪资的方法，经理和雇员的薪资明显不同，所以不能使用从父类继承来的方法</p><h2 id="super关键字" tabindex="-1"><a class="header-anchor" href="#super关键字" aria-hidden="true">#</a> super关键字</h2><p>在子类中我们可以使用<code>super</code>关键字来调用父类的方法，如经理的获取薪资虽然已经被覆写，但是我们还是需要使用父类获取薪资的方法，该方法与子类同名，这里可以使用<code>super.父类方法</code>调用</p><p>同理，继承自父类的构造方法也是可以覆写，同理如果需要使用父类的构造方法，可以使用<code>super(参数列表)</code>,通过参数列表来区分调用的哪一个父类构造方法</p><p>综上super有如下用法</p><ul><li>super调用父类方法</li><li>super调用父类构造方法</li></ul><p>代码实现<br> NF</p><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h2><p>多态就是指可以将子类对象赋值给父类类型的对象变量</p><p>如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/Java继承和多态-2023-02-25-18-09-51.png" alt="Java继承和多态-2023-02-25-18-09-51"></p><p>多态注意点<br> 父类无法使用子类独有的方法，如上图</p><h2 id="阻止继承" tabindex="-1"><a class="header-anchor" href="#阻止继承" aria-hidden="true">#</a> 阻止继承</h2><p>我们可以阻止有一个类继承另外一个类，只需在其class之前加一个<code>final</code>关键字即可</p><p>对于方法来讲，如果加上<code>final</code>表示子类可以继承，但是不能覆写方法</p><p>对于一个类如果是<code>final类</code>，其方法默认是<code>final</code>，不管你是否显示的声明final；而其数据域不会自动变成<code>final</code>，只有你用<code>final</code>关键字声明才可以</p>',26),i=[p];function h(s,n){return a(),d("div",null,i)}const t=e(c,[["render",h],["__file","Java继承和多态.html.vue"]]);export{t as default};
