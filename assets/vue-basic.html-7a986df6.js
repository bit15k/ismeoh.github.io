import{_ as e,X as t,Y as p,$ as n,a3 as o,a1 as s,a0 as l}from"./framework-44854a8b.js";const i={},c=n("h1",{id:"vue基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue基础","aria-hidden":"true"},"#"),s(" Vue基础")],-1),u=n("h2",{id:"创建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建","aria-hidden":"true"},"#"),s(" 创建")],-1),r=n("li",null,"想让vue工作，就必须创建一个vue实例，并且要传入一个配置对象",-1),d=n("li",null,"root容器内代码依然符合HTML规范，只不过混入一些vue的语法",-1),k=n("li",null,"root容器内的代码叫做vue模板",-1),v=n("li",null,"一个容器对应一个vue实例，不能出现多对多，一对多等",-1),m=n("li",null,"在真实开发中只有一个vue实例，并且配合着组件一起使用",-1),b=n("li",null,"一旦data数据发生改变，模板中用到的数据也会发生改变",-1),h=l(`<p>注意区分：</p><ol><li>一个容器对应一个vue实例，不能出现多对多，一对多等</li><li>js表达式和js代码<br> 表达式：一个表达式会生成一个值，放在任何一个需要值的地方。<br> 比如</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a<span class="token punctuation">,</span>
a<span class="token operator">+</span>b<span class="token punctuation">,</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
x<span class="token operator">===</span>y<span class="token operator">?</span><span class="token string">&#39;a&#39;</span><span class="token operator">:</span><span class="token string">&quot;b&quot;</span>
js代码语句：<span class="token keyword">if</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>hello,{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 设置为 false 以阻止 vue 在启动时生成生产提示</span>

        <span class="token comment">// 创建vue实例</span>
        <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span><span class="token comment">// el用于指定当前vue实例为哪个容器服务，通常是css选择器字符串</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//data中存储数据，用于容器中使用，值暂时写成一个对象</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;tk&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法" aria-hidden="true">#</a> 模板语法</h2><ol><li>插值语法 功能：用于解析标签体内容 写法：<code>{{xxx}}</code>,xxx是指js表达式，可以直接读取data中的所有属性</li><li>指令语法 功能：用于解析标签，包括标签属性，标签体内容，绑定事件等等 举例：<code>v-bind:href=&quot;xxx&quot;</code><br> 简写 <code>:href=&quot;xxx&quot;</code>,xxx是指js表达式，同杨可以读取data中所有属性<br> 备注：vue有很多v-开头的指令，v-bind只是举例</li></ol><h2 id="数据绑定" tabindex="-1"><a class="header-anchor" href="#数据绑定" aria-hidden="true">#</a> 数据绑定</h2><ol><li>单向绑定v-bind,数据只能从data流向页面 <ol><li>基本格式<code>v-bind:属性名=&quot;表达式&quot; 或 :属性名=&#39;表达式&#39;</code><br> 例如 <code>v-bind:value=&#39;name&#39;</code></li></ol></li><li>双向绑定v-model，数据和data是双向的 <ol><li>基本格式：<code>v-model:属性名=&#39;表达式&#39;</code></li><li>只用于表单元素</li></ol></li></ol><h2 id="el和data" tabindex="-1"><a class="header-anchor" href="#el和data" aria-hidden="true">#</a> el和data</h2><ol><li><p>el有两种写法</p><ol><li><p>new vue时候直接配置<code>el</code>属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>其他配置项   
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>先创建vue实例，然后使用<code>v.$mount(&#39;#root&#39;)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>x<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>data有两种写法</p><ol><li><p>对象式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
data第一种写法：对象式
<span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//data中存储数据，用于容器中使用，值暂时写成一个对象</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;baidu&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;http://baidu.com&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
<span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里的this是vue对象，这里的函数只能写成一般函数，不能写成this函数</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;tk&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>如何选择：现阶段哪种都可，<strong>使用组件必须用函数式</strong><br> 注意事项：函数式一定要用一般函数，不要用箭头函数</p></li></ol><h2 id="mvvm模型" tabindex="-1"><a class="header-anchor" href="#mvvm模型" aria-hidden="true">#</a> MVVM模型</h2><ol><li>model data中的数据</li><li>view 模板代码</li><li>vm 视图模型，vue实例</li></ol><p>观察发现</p><ol><li>data中的所有属性，最后都出现在vm身上</li><li>vm身上的所有属性以及vue原型的所有属性，都可以在vue模板中直接使用</li></ol><h2 id="数据代理" tabindex="-1"><a class="header-anchor" href="#数据代理" aria-hidden="true">#</a> 数据代理</h2><h3 id="object-defineproperty" tabindex="-1"><a class="header-anchor" href="#object-defineproperty" aria-hidden="true">#</a> Object.defineProperty</h3><p>了解数据代理，必须先要知道js的一个方法<code>Object.defineProperty</code> 这个方法的作用是<strong>用于直接在对象上定义一个属性，或者修改一个属性，并且返回该对象</strong><br> 格式：<code>Object.defineProperty(对象，属性名字符串,{一些属性或方法})</code>,最常见的如下</p><p>常见属性<br><code>value:18</code>, // 设置属性的值<br><code>enumerable:true</code>, //控制属性是否可以枚举，默认是否<br><code>Writable:true</code>,//控制属性是否能被修改，默认是否<br><code>configurable:true</code>,//控制属性是否可以被删除，默认是否</p><p>常见方法※<br><code>get和set方法</code><br> 作用：当对象内的属性调用的时候会调用，get表示读取调用，set表示赋值时候调用<br> 写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;有人读取age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
或简写
<span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span>

<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
<span class="token comment">// value:18,</span>
<span class="token comment">// enumerable:true, //控制属性是否可以枚举，默认是否</span>
<span class="token comment">// Writable:true,//控制属性是否能被修改，默认是否</span>
<span class="token comment">// configurable:true,//控制属性是否可以被删除，默认是否</span>

<span class="token comment">// 当有人读取age属性，getter就会调用，返回age的值</span>
<span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;有人读取age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 当有人修改age属性，setter就会调用，setter会受到具体的值</span>
<span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;有人修改age,值是：&#39;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><p>数据代理是通过一个对象来操作另一个对象中属性的操作 读或写，例如如下</p><p>obj代理obj2中的树形，通过操作obj2中的x属性可以实现对obj的x的属性的赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token comment">// 数据代理obj1中的属性</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>x
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span>x <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue数据代理" tabindex="-1"><a class="header-anchor" href="#vue数据代理" aria-hidden="true">#</a> vue数据代理</h3><p>基本原理<br><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230218131239.png" alt="20230218131239"><br> 通过<code>object.defineProperty()</code>把data中的属性添加到vm上，为每一个添加到vm上的属性，添加getter和setter方法，在getter和setter内部去操作data中对应的属性 即使用<code>vm.</code>就可以访问到data中的数据</p><p>好处<br> 更方便的操作data中的数据</p><h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><ol><li>使用<code>v-on:xx</code>或者<code>@xx </code>绑定事件，其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中的函数不要写成箭头函数，否则this就不是vm了</li><li>methods中配置的一般函数都是被vue管理的函数，this指向vm或者组件实例</li><li><code>@click=&quot;demo&quot;</code> 等同于<code>@click=&#39;demo($event)&#39;</code>,后者可以传参<br> 例如<br> 使用时<code>event.target.value</code>指定事件发生所指向的对象进行赋值</li></ol><h3 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h3><p>1-3常用<br> 写法<br><code>@click.修饰符</code></p><p>事件修饰符如下</p><ol><li>prevent 阻止默认事件<br> 例如在超链接标签增加点击事件，点击后执行对应方法，而不会去跳转链接</li><li>stop 阻止事件冒泡</li><li>once 事件只触发一次</li><li>capture 使用事件捕获模式</li><li>self 只有event.target是当前操作元素才触发事件</li><li>passive 事件默认行为立刻执行，无需等待事件回调执行完毕</li></ol><h3 id="键盘事件" tabindex="-1"><a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a> 键盘事件</h3><p>使用方法<br><code>v-on:keyup/down.案件名</code></p><ol><li><p>vue中常见的按键别名</p><ul><li>回车 enter</li><li>删除或退格 delete</li><li>退出 esc</li><li>空格 space</li><li>换行 tab 必须配合keydown使用</li><li>上 up</li><li>下 down</li><li>左 left</li><li>右 right</li></ul></li><li><p>vue未提供别名的按键，可以用按键原始的key值绑定，但注意要转换为kebab-case端横线命名<br> 如<code>@keyup.caps-lock=&#39;showInfo&#39;</code></p></li><li><p>系统修饰键 ctrl alt shift meta徽标键</p><ol><li>配合keyup用，按下按键同时，必须再按下其他键，随后释放其他键，事件才能触发</li><li>配合keydown使用，正常触发按键</li></ol></li><li><p>也可以使用keycode去指定具体按键，不推荐</p></li><li><p>Vue.config.keyCode.自定义键名 = 键码，可以去定制按键别名</p></li></ol>`,39);function g(a,y){return t(),p("div",null,[c,u,n("ol",null,[r,d,k,v,m,n("li",null,o(a.xxx)+"要写成js表达式，xxx可以自动读取data中的所有属性",1),b]),h])}const f=e(i,[["render",g],["__file","vue-basic.html.vue"]]);export{f as default};
