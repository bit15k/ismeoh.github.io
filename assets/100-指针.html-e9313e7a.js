import{_ as n,X as s,Y as a,a1 as e}from"./framework-ca96282b.js";const p={},t=e(`<h1 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h1><h2 id="一些概念" tabindex="-1"><a class="header-anchor" href="#一些概念" aria-hidden="true">#</a> 一些概念</h2><p><strong>指针</strong>就是地址，记录存储变量的那块区域的内存地址，形象化的称作指向或指针</p><p><strong>直接访问</strong>利用变量名进行访问数据叫做直接访问,我们所说的变量名就是变量存储在哪的地址，只不过是编译系统自动完成的寻址，比如下面</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230221042947.png" alt="20230221042947"></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
a<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>间接访问</strong><br> 如下图，一个变量存储另外一个变量的地址，然后通过该变量存储的地址找到它指向的变量</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230221050226.png" alt="20230221050226"></p><p>其中<code>&amp;</code>表示 <strong>取地址运算符</strong><br> 上面<code>int *pointer</code>表示定义一个指针变量</p><p><strong>指针变量</strong>是指专门用来存储地址的变量</p><h2 id="定义指针变量" tabindex="-1"><a class="header-anchor" href="#定义指针变量" aria-hidden="true">#</a> 定义指针变量</h2><p>格式<code>变量类型 *变量名</code><br> 其中*表示这是一个指针变量，变量类型说明这是一个指向什么类型的指针</p><p>如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>pt<span class="token punctuation">;</span> <span class="token comment">// 定义存储指向整型的地址</span>
pt <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span> <span class="token comment">// 取i地址给pt存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问i，也可以通过 <strong>直接访问</strong>和 <strong>间接访问</strong>,如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接访问</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 间接访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一些注意的</p><ul><li>指针变量不能自己指定一个数给其赋值</li><li>指针必须要指定基类型，因为不同数据类型的所占字节数不同，当涉及指针移动，不同类型移动的范围不同</li></ul><h2 id="两个运算符" tabindex="-1"><a class="header-anchor" href="#两个运算符" aria-hidden="true">#</a> 两个运算符</h2><ul><li><code>*</code></li><li><code>&amp;</code></li></ul><p>所谓<code>&amp;</code>表示取地址符很好理解<br><code>*</code>表示<strong>间接访问符</strong>，搭配指针变量使用，也叫作 <strong>指针运算符</strong>，很好理解指针变量是地址，此符号的意思就是通过地址间接寻找到真实的变量，并获取其值</p><p>例</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>
<span class="token comment">// 下面等同</span>
cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p1<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些注意点<br> *和&amp;其运算符优先级一样，但是当同时出现其结合性是从右到左，例如<br><code>*&amp;a</code>是指取a得地址再去访问a,<code>&amp;*a</code>表示取a的地址</p><h2 id="指针做函数参数" tabindex="-1"><a class="header-anchor" href="#指针做函数参数" aria-hidden="true">#</a> 指针做函数参数</h2><p>NF</p>`,26),o=[t];function c(i,r){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","100-指针.html.vue"]]);export{d as default};
