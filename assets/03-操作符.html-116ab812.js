import{_ as e,X as t,Y as a,a0 as o}from"./framework-5ccfa493.js";const c={},d=o('<h1 id="java操作符" tabindex="-1"><a class="header-anchor" href="#java操作符" aria-hidden="true">#</a> Java操作符</h1><h2 id="自增和自减符" tabindex="-1"><a class="header-anchor" href="#自增和自减符" aria-hidden="true">#</a> 自增和自减符</h2><p>如<code>i++,i--</code>,这种符号叫做自增或自减符号，其等同于<code>i=i+1</code></p><p>自增和自减符分为两种，以自增为例分为<code>前缀自增</code>和<code>后缀自增</code>，即<code>++i</code>和<code>i++</code>,其区别如下</p><p>public static void main(String[] args) { int i = 0; System.out.println(&quot;i++-&gt;&quot;+i++); int j = 0; System.out.println(&quot;++j-&gt;&quot;+(++j)); }</p><p>i++-&gt;0 ++j-&gt;1</p><p>由上面可以看出，前缀自增会<code>先计算，后使用</code>;后缀自增会<code>先使用，后计算</code></p><h2 id="三元操作符" tabindex="-1"><a class="header-anchor" href="#三元操作符" aria-hidden="true">#</a> 三元操作符</h2><p><strong>三元操作符</strong>的基本语法<code>布尔表达式 ? 值0 : 值1</code> ,若表达式为真则执行值0，为假执行1</p>',9),i=[d];function r(n,s){return t(),a("div",null,i)}const _=e(c,[["render",r],["__file","03-操作符.html.vue"]]);export{_ as default};
