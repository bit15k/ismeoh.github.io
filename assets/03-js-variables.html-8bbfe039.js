import{_ as n,X as s,Y as a,a0 as e}from"./framework-44854a8b.js";const t={},p=e(`<h1 id="js变量" tabindex="-1"><a class="header-anchor" href="#js变量" aria-hidden="true">#</a> JS变量</h1><p>ECMAScript 变量是<strong>松散类型</strong>的，意思是<strong>变量可以用于保存任何类型的数据</strong>。每个变量只不过是一个用于保存任意值的命名占位符。</p><p>有 3 个关键字可以声明变量：<strong>var、const 和 let</strong>。其中，var 在 ECMAScript 的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript 6 及更晚的版本中使用。</p><h2 id="var关键字" tabindex="-1"><a class="header-anchor" href="#var关键字" aria-hidden="true">#</a> var关键字</h2><p>主要包含</p><ul><li>var的作用域</li><li>var的声明提升</li></ul><p><code>var message</code><br> 上述var表示关键字，message表示变量标识符或变量名<br> 表示定义一个变量message可以保留任何类型变量</p><p>变量的<strong>undefined</strong><br> 一个变量只是上面定义了，但并没有初始化则其值是<strong>undefined</strong></p><p>变量的<strong>初始化</strong><br> 所谓初始化是指变量定义和赋值同时进行如 <code>var message = 1</code><br> 不推荐的写法<code>message = 1</code>即不指明关键字</p><p>同时初始化多个写法<code>var message = &quot;msg&quot;,found = false, age = 1</code></p><h3 id="var作用域" tabindex="-1"><a class="header-anchor" href="#var作用域" aria-hidden="true">#</a> var作用域</h3><p>函数内部使用var关键字声明的变量，是<strong>局部变量</strong>，函数退出时候会销毁</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>
<span class="token punctuation">}</span> 
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出错！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若要在函数外部能够访问，可以在函数内部定义全局变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> message<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 message <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="var声明提升" tabindex="-1"><a class="header-anchor" href="#var声明提升" aria-hidden="true">#</a> var声明提升</h3><p>即未声明先使用在一定情况下是可以，会自动帮你提前声明</p><p><strong>函数内部提升</strong>至函数头部<br> 即可以先使用不声明，会自动帮你在头部声明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
 <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等同于提升到头部</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">var</span> age<span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
 <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="let关键字" tabindex="-1"><a class="header-anchor" href="#let关键字" aria-hidden="true">#</a> let关键字</h2><p>主要包含如下内容</p><ul><li>let是块作用域</li><li>不会提升</li><li>暂时性锁区</li><li>不会成为window对象的属性</li><li>不允许重复声明</li><li>不建议使用条件式声明</li><li>对比使用var和let进行for循环区别</li></ul><h3 id="块作用域" tabindex="-1"><a class="header-anchor" href="#块作用域" aria-hidden="true">#</a> 块作用域</h3><p>与<strong>var的区别</strong>如下<br> 第一个区别:let是<strong>块作用域</strong></p><p>let 声明的范围是块作用域，而 var 声明的范围是函数作用域。</p><p>所谓块作用域是指的<code>{}</code>包裹起来的，如if,for后面的{}<br> 所谓函数作用域是指函数块作用域{}</p><p>例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Matt </span>
<span class="token punctuation">}</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Matt </span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 26 </span>
<span class="token punctuation">}</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: age 没有定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面例子说明，var关键字是函数作用域</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">;</span> 
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Nicholas&#39; </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> 
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Matt&#39; </span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span> 
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Tom&#39; </span>
        <span class="token punctuation">}</span> 
        <span class="token comment">// name is????</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Tom</span>
    
<span class="token punctuation">}</span>
<span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面，因为<code>let</code>是块作用域，所以在外面访问不到，但是<code>var</code>是极限是函数块作用域所以在外面可以访问<br><strong>所以函数块作用域与块作用域显然前者更大后者范围</strong>更小，块作用域是函数块作用域的子集<br><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230131031629.png" alt="20230131031629"></p><p>let块作用域内<strong>冗余声明</strong>不被允许,如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name<span class="token punctuation">;</span> 
<span class="token keyword">var</span> name<span class="token punctuation">;</span> 
<span class="token keyword">let</span> age<span class="token punctuation">;</span> 
<span class="token keyword">let</span> age<span class="token punctuation">;</span> <span class="token comment">// SyntaxError；标识符 age 已经声明过了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不会提升" tabindex="-1"><a class="header-anchor" href="#不会提升" aria-hidden="true">#</a> 不会提升</h3><p>第二个区别:let声明变量不会被提升,如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// age 不会被提升</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError：age 没有定义</span>
    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="暂时性锁区" tabindex="-1"><a class="header-anchor" href="#暂时性锁区" aria-hidden="true">#</a> 暂时性锁区</h3><p>上面如果是var那么会出现变量提升，但是若紧跟let，JavaScript引擎会关注到，因此在此<strong>之前</strong>不能有任何的引用，这个叫做<strong>暂时性锁区</strong>，从而导致在<strong>声明之前任何使用</strong>都会抛出错误</p><h3 id="不会成为window的属性" tabindex="-1"><a class="header-anchor" href="#不会成为window的属性" aria-hidden="true">#</a> 不会成为window的属性</h3><p>var声明的变量会成为 <strong>window</strong>对象属性<br> let <strong>不会</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Matt&#39; </span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不允许重复声明变量" tabindex="-1"><a class="header-anchor" href="#不允许重复声明变量" aria-hidden="true">#</a> 不允许重复声明变量</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面，由于let是块级变量只在当前行，所以不会提升，但是使用var就不同了，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tom</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面，var对于重复声明的处理是，提升覆盖之前的提升，所以允许重复声明（不推荐）</p><h3 id="条件式声明" tabindex="-1"><a class="header-anchor" href="#条件式声明" aria-hidden="true">#</a> 条件式声明</h3><p>所谓条件式声明是指，用if来判断是否定义变量，若没有在后面{}定义一个，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">let</span> name<span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
 <span class="token comment">// name 被限制在 if {} 块的作用域内</span>
 <span class="token comment">// 因此这个赋值形同全局赋值</span>
  name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> 


 <span class="token keyword">try</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果 age 没有声明过，则会报错</span>
 <span class="token punctuation">}</span> 
 <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">let</span> age<span class="token punctuation">;</span> 

 <span class="token punctuation">}</span> 
 <span class="token comment">// age 被限制在 catch {}块的作用域内</span>
 <span class="token comment">// 因此这个赋值形同全局赋值</span>
age <span class="token operator">=</span> <span class="token number">26</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面，由于let是块级作用域，所以只在if{}块中起作用，故下面赋值就不是if{}声明的变量，而不加关键字的声明等同于var声明，并且提升至头部，所以它是全局变量<br> 由于是块级作用域，所以即使<code>try catch</code>也无法捕获</p><h3 id="与for循环" tabindex="-1"><a class="header-anchor" href="#与for循环" aria-hidden="true">#</a> 与for循环</h3><p>迭代作用域<code>仅限循环内部</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token comment">// 循环逻辑</span>
<span class="token punctuation">}</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: i 没有定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是var声明的，会渗透外部</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token comment">// 循环逻辑 </span>
<span class="token punctuation">}</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="const声明" tabindex="-1"><a class="header-anchor" href="#const声明" aria-hidden="true">#</a> const声明</h2><p>主要有如下</p><ul><li>与let基本一致</li><li>必须声明变量同时初始化变量</li><li><strong>变量不能被修改</strong></li></ul><h3 id="与let类似" tabindex="-1"><a class="header-anchor" href="#与let类似" aria-hidden="true">#</a> 与let类似</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
age <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: 给常量赋值</span>
<span class="token number">3.3</span> 变量 <span class="token number">29</span> 
<span class="token comment">// const 也不允许重复声明</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError </span>
<span class="token comment">// const 声明的作用域也是块</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Matt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="const与对象" tabindex="-1"><a class="header-anchor" href="#const与对象" aria-hidden="true">#</a> const与对象</h3><p>const若声明的是一个对象，那么可以修改对象内部的值,因为对象是引用类型，const声明的变量再堆内存种记录地址，这个地址指向了栈实际存储对象的地方，所以修改对象内部属性不受限制，因为地址没变</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="const与循环" tabindex="-1"><a class="header-anchor" href="#const与循环" aria-hidden="true">#</a> const与循环</h3><p>const与for-of循环同时使用没有意义,但是可以用在for-in循中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> j <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token comment">// 7, 7, 7, 7, 7 </span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token comment">// a, b</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token comment">// 1, 2, 3, 4, 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ul><li>不使用var</li><li>const优先，let次之</li></ul>`,70),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","03-js-variables.html.vue"]]);export{r as default};
