import{_ as n,W as s,X as a,a0 as e}from"./framework-11f0740a.js";const t={},p=e(`<h1 id="js对象和函数" tabindex="-1"><a class="header-anchor" href="#js对象和函数" aria-hidden="true">#</a> JS对象和函数</h1><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><h3 id="对象理论" tabindex="-1"><a class="header-anchor" href="#对象理论" aria-hidden="true">#</a> 对象理论</h3><p>回忆js种数据类型<br><strong>基本数据类型</strong></p><ul><li><p>String 字符串</p></li><li><p>Number 数值</p></li><li><p>Boolean 布尔值</p></li><li><p>Undefined 未定义 <strong>引用数据类型</strong></p></li><li><p>Object 对象</p></li></ul><p>基本数据类型有什么<strong>不足</strong>？基本数据类型都是单一的数据类型，值和值没有关系</p><p>例如：在JS中表示一个人的信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> gender <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用基本数据类型创建，我们所创建的类型都是独立的，不能成为一个整体</p><p><strong>对象</strong><br> 是一个复合的数据类型，对象中可以保存多个不同类型的属性</p><p>种类<br> 1.<strong>内建对象</strong>：由ES标准中定义的对象，在任何ES的实现都可以使用<br> 比如Math\\String\\Number等等</p><p>2.<strong>宿主对象</strong>：由JS运行环境提供的对象，目前主要指浏览器提供的对象<br> 比如DOM\\BOM(document/console)</p><p>3.<strong>自定义对象</strong><br> 由开发者自己创建的对象</p><h3 id="对象语法" tabindex="-1"><a class="header-anchor" href="#对象语法" aria-hidden="true">#</a> 对象语法</h3><p>第一种方法，第二方法对象字面量创建对象<br><strong>创建对象</strong>调用Obj的构造函数<br><code>var obj名 = new Object()</code><br> 对象添加、修改、访问和删除属性<br><code>obj.属性名 = 值</code>，<code>delete obj.属性名</code></p><p>关于<strong>对象属性名要求</strong><br> 不强制要求遵循标识符要求，但是使用时尽量遵守标识符规范</p><p>当使用特殊的属性名时，访问可以用<code>[]</code><br> 例如<code>obj.[&#39;123&#39;]</code><br> 使用上面的优点是，可以传递一个变量，例如如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>给对象属性传递一个对象，例如如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个obj2</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将obj2作为一个obj的一个属性</span>
obj<span class="token punctuation">.</span>test <span class="token operator">=</span> obj2<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面，in运算符 作用：通过该运算符可以检查对象中是否由指定的属性 语法：&quot;<code>属性名&quot; in 对象</code></p><h3 id="数据存储方式" tabindex="-1"><a class="header-anchor" href="#数据存储方式" aria-hidden="true">#</a> 数据存储方式</h3><p>1.基本数据类的数据直接保存在栈内存，值和值是独立存在的</p><p>2.引用数据类型是保存在堆中，每创建一个对象都会在堆内存中开辟一个空间，变量保存的是内存地址（对象的引用）</p><p>3.如果两个变量保存的是同一个对象的引用，当通过其中一个修改对象的属性，另外一个也会受到到影响，将其中的一个变量设置为null不会影响其他另外一个变量</p><p>4.比较基本数据类型比较的是值，比较引用数据类型比较的是地址<br> 如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230130191921.png" alt="20230130191921"></p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230130192354.png" alt="20230130192354"></p><p><img src="https://cdn.jsdelivr.net/gh/ismeoh/imgchr//imgs/20230130192416.png" alt="20230130192416"></p><h3 id="对象字面量创建对象" tabindex="-1"><a class="header-anchor" href="#对象字面量创建对象" aria-hidden="true">#</a> 对象字面量创建对象</h3><p><code>var obj = {};</code></p><h2 id="函数基础" tabindex="-1"><a class="header-anchor" href="#函数基础" aria-hidden="true">#</a> 函数基础</h2><p>函数也是对象<br> 与普通对象的区别：函数对象可以封装一些功能，使用时候执行这些功能</p><hr><p>函数使用<br> 使用构造函数创建<br><code>var 变量 = new Function([传入的东西])</code><br> 调用<br><code>变量名()</code></p>`,35),o=[p];function r(c,i){return s(),a("div",null,o)}const l=n(t,[["render",r],["__file","js-basic.html.vue"]]);export{l as default};
